ggplot(damage.top_summary, aes(x=normalizedEVTYPE, y=kcost)) +
ggtitle(paste("Top", top_n, "Property and Crop Damage per Event Type\n",
min_year, " - ", max_year)) +
xlab("Event Type") + ylab("Cost (USD x 1000") +
theme(axis.text.x=element_text(angle=45, vjust=1, hjust=1)) +
geom_point() +
geom_text(hjust=0, yjust=0, size=4, color="red",
aes(label=paste0(evtype, "\n", cnt),
x=damage.top_summary$normalizedEVTYPE[index], y=cnt))
# Find event with worst impact
index <- which.max(human.top_summary$souls)
evtype <- human.top_summary$normalizedEVTYPE[index]
cnt <- human.top_summary$souls[index]
# Plot
ggplot(human.top_summary, aes(x=normalizedEVTYPE, y=souls)) +
ggtitle(paste("Top", top_n, "Injuries and Fatalities per Event Type\n",
min_year, " - ", max_year)) +
xlab("Event Type") + ylab("Count") +
theme(axis.text.x=element_text(angle=45, vjust=1, hjust=1)) +
geom_point() +
geom_text(hjust=0, yjust=0, size=4, color="red",
aes(label=paste0(evtype, "\n", cnt),
x=human.top_summary$normalizedEVTYPE[index], y=cnt))
# Find event with worst impact
index <- which.max(human.top_summary$souls)
evtype <- human.top_summary$normalizedEVTYPE[index]
cnt <- human.top_summary$souls[index]
# Plot
ggplot(human.top_summary, aes(x=normalizedEVTYPE, y=souls)) +
ggtitle(paste("Top", top_n, "Injuries and Fatalities per Event Type\n",
min_year, " - ", max_year)) +
xlab("Event Type") + ylab("Count") +
theme(axis.text.x=element_text(angle=45, vjust=1, hjust=1)) +
geom_point() +
geom_text(hjust=0, yjust=1, size=4, color="red",
aes(label=paste0(evtype, "\n", cnt),
x=human.top_summary$normalizedEVTYPE[index], y=cnt))
# Find event with worst impact
index <- which.max(human.top_summary$souls)
evtype <- human.top_summary$normalizedEVTYPE[index]
cnt <- human.top_summary$souls[index]
# Plot
ggplot(human.top_summary, aes(x=normalizedEVTYPE, y=souls)) +
ggtitle(paste("Top", top_n, "Injuries and Fatalities per Event Type\n",
min_year, " - ", max_year)) +
xlab("Event Type") + ylab("Count") +
theme(axis.text.x=element_text(angle=45, vjust=1, hjust=1)) +
geom_point() +
geom_text(hjust=0, yjust=0, size=4, color="red",
aes(label=paste0(evtype, "\n", cnt),
x=human.top_summary$normalizedEVTYPE[index], y=cnt))
?geom_text
ggplot(damage.top_summary, aes(x=normalizedEVTYPE, y=kcost)) +
ggtitle(paste("Top", top_n, "Property and Crop Damage per Event Type\n",
min_year, " - ", max_year)) +
xlab("Event Type\nfigure 3.") + ylab("Cost (Thousand $)") +
theme(axis.text.x=element_text(angle=45, vjust=1, hjust=1)) +
geom_point() +
geom_text(hjust=0, yjust=0, size=4, color="red",
aes(label=paste0(evtype, "\n", cnt),
x=damage.top_summary$normalizedEVTYPE[index], y=cnt))
index <- which.max(damage.top_summary$kcost)
evtype <- damage.top_summary$normalizedEVTYPE[index]
cnt <- damage.top_summary$kcost[index]
# Plot
ggplot(damage.top_summary, aes(x=normalizedEVTYPE, y=kcost)) +
ggtitle(paste("Top", top_n, "Property and Crop Damage per Event Type\n",
min_year, " - ", max_year)) +
xlab("Event Type\nfigure 3.") + ylab("Cost (Thousand $)") +
theme(axis.text.x=element_text(angle=45, vjust=1, hjust=1)) +
geom_point() +
geom_text(hjust=0, yjust=0, size=4, color="red",
aes(label=paste0(evtype, "\n", cnt),
x=damage.top_summary$normalizedEVTYPE[index], y=cnt))
ggplot(storms.df, aes(x=bgn_year)) +
ggtitle(paste("Number of Weather Event Observations per Year")) +
xlab("Year\nfigure 1.") + ylab("Number Events") +
theme(axis.text.x=element_text(angle=45, vjust=1, hjust=1)) +
geom_histogram(binwidth=1, color="black", fill="white")
s <- select(storms.orig, EVTYPE, BGN_DATE,
FATALITIES, INJURIES,
PROPDMG, PROPDMGEXP, CROPDMG, CROPDMGEXP)
s
str(s)
storms.df <- select(storms.orig, EVTYPE, BGN_DATE,
FATALITIES, INJURIES,
PROPDMG, PROPDMGEXP, CROPDMG, CROPDMGEXP)
dim(storms.df)
storms.df <- select(storms.orig,
EVTYPE, BGN_DATE, FATALITIES, INJURIES,
PROPDMG, PROPDMGEXP, CROPDMG, CROPDMGEXP)
storms.df <- mutate(storms.df, bgn_year=as.integer(format(strptime(storms.df$BGN_DATE, "%m/%d/%Y"), "%Y")))
unique(storms.df$bgn_year)
ggplot(storms.df, aes(x=bgn_year)) +
ggtitle(paste("Number of Weather Event Observations per Year")) +
xlab("Year\nfigure 1.") + ylab("Number Events") +
theme(axis.text.x=element_text(angle=45, vjust=1, hjust=1)) +
geom_histogram(binwidth=1, color="black", fill="white")
storms.df <- mutate(storms.df, bgn_year=as.integer(format(strptime(storms.df$BGN_DATE, "%m/%d/%Y"), "%Y")))
unique(storms.df$bgn_year)
ggplot(storms.df, aes(x=bgn_year)) +
ggtitle(paste("Number of Weather Event Observations per Year")) +
xlab("Year\nfigure 1.") + ylab("Number Events") +
theme(axis.text.x=element_text(angle=45, vjust=1, hjust=1)) +
geom_histogram(binwidth=1, color="black", fill=bgn_year>=min_year)
storms.df <- mutate(storms.df, bgn_year=as.integer(format(strptime(storms.df$BGN_DATE, "%m/%d/%Y"), "%Y")))
unique(storms.df$bgn_year)
ggplot(storms.df, aes(x=bgn_year)) +
ggtitle(paste("Number of Weather Event Observations per Year")) +
xlab("Year\nfigure 1.") + ylab("Number Events") +
theme(axis.text.x=element_text(angle=45, vjust=1, hjust=1)) +
geom_histogram(binwidth=1, color="black", fill=storms.df$bgn_year>=min_year)
storms.df <- mutate(storms.df, bgn_year=as.integer(format(strptime(storms.df$BGN_DATE, "%m/%d/%Y"), "%Y")))
unique(storms.df$bgn_year)
ggplot(storms.df, aes(x=bgn_year, fill=bgn>=min_year)) +
ggtitle(paste("Number of Weather Event Observations per Year")) +
xlab("Year\nfigure 1.") + ylab("Number Events") +
theme(axis.text.x=element_text(angle=45, vjust=1, hjust=1)) +
geom_histogram(binwidth=1, color="black")
ggplot(storms.df, aes(x=bgn_year, fill=bgn>=min_year)) +
+     ggtitle(paste("Number of Weather Event Observations per Year")) +
+     xlab("Year\nfigure 1.") + ylab("Number Events") +
+     theme(axis.text.x=element_text(angle=45, vjust=1, hjust=1)) +
+     geom_histogram(binwidth=1, color="black")
ggplot(storms.df, aes(x=bgn_year, fill=bgn_year>=min_year)) +
ggtitle(paste("Number of Weather Event Observations per Year")) +
xlab("Year\nfigure 1.") + ylab("Number Events") +
theme(axis.text.x=element_text(angle=45, vjust=1, hjust=1)) +
geom_histogram(binwidth=1, color="black")
ggplot(storms.df, aes(x=bgn_year, fill=bgn_year>=min_year)) +
ggtitle(paste("Number of Weather Event Observations per Year")) +
xlab("Year\nfigure 1.") + ylab("Number Events") +
theme(axis.text.x=element_text(angle=45, vjust=1, hjust=1)) +
scale_fill_manual(values = c("green", "purple")) +
geom_histogram(binwidth=1, color="black", fill="white")
ggplot(storms.df, aes(x=bgn_year, fill=bgn_year>=min_year)) +
ggtitle(paste("Number of Weather Event Observations per Year")) +
xlab("Year\nfigure 1.") + ylab("Number Events") +
theme(axis.text.x=element_text(angle=45, vjust=1, hjust=1)) +
scale_fill_manual(values = c("green", "purple")) +
geom_histogram(binwidth=1, color="black")
ggplot(storms.df, aes(x=bgn_year, fill=bgn_year>=min_year)) +
ggtitle(paste("Number of Weather Event Observations per Year")) +
xlab("Year\nfigure 1.") + ylab("Number Events") +
theme(axis.text.x=element_text(angle=45, vjust=1, hjust=1)) +
scale_fill_manual(values = c("white", "red")) +
geom_histogram(binwidth=1, color="black")
ggplot(storms.df, aes(x=bgn_year, fill=bgn_year>=min_year)) +
ggtitle(paste("Number of Weather Event Observations per Year")) +
xlab("Year\nfigure 1.") + ylab("Number Events") +
theme(axis.text.x=element_text(angle=45, vjust=1, hjust=1)) +
scale_fill_manual("Included", values=c("white", "red")) +
geom_histogram(binwidth=1, color="black")
avg_souls = mean(sum(human.df$INJURIES, human.df$FATALITIES))
avg_souls
human.df$INJURIES
human.summary <- human.df %>% group_by(normalizedEVTYPE) %>%
summarise(souls=sum(INJURIES, FATALITIES))
dim(human.summary)
storms.df <- select(storms.orig,
EVTYPE, BGN_DATE, FATALITIES, INJURIES,
PROPDMG, PROPDMGEXP, CROPDMG, CROPDMGEXP)
dim(storms.df)
storms.df <- mutate(storms.df, bgn_year=as.integer(format(strptime(storms.df$BGN_DATE, "%m/%d/%Y"), "%Y")))
unique(storms.df$bgn_year)
ggplot(storms.df, aes(x=bgn_year, fill=bgn_year>=min_year)) +
ggtitle(paste("Number of Weather Event Observations per Year")) +
xlab("Year\nfigure 1.") + ylab("Number Events") +
theme(axis.text.x=element_text(angle=45, vjust=1, hjust=1)) +
scale_fill_manual("Included", values=c("white", "red")) +
geom_histogram(binwidth=1, color="black")
max_year <- max(storms.df$bgn_year)
min_year <- max(min(storms.df$bgn_year), max_year - 10)
storms.df <- filter(storms.df, bgn_year >= min_year)
dim(storms.df)
storms.df <- filter(storms.df, FATALITIES>0 | INJURIES>0 | PROPDMG>0 | CROPDMG>0)
dim(storms.df)
unique(storms.df$EVTYPE)
normalizedEVTYPE <- storms.df$EVTYPE
# Upper case all
normalizedEVTYPE <- toupper(normalizedEVTYPE)
# Replace special characters /, (, ), ., \, &, - with space
normalizedEVTYPE <- gsub("/|\\(|\\)|\\.|\\\\|\\&|\\-", " ", normalizedEVTYPE)
# Remove numeric F, G, or numeric magnitudes
normalizedEVTYPE <- gsub("[F|G]\\d+", " ", normalizedEVTYPE)
normalizedEVTYPE <- gsub("\\d+", " ", normalizedEVTYPE)
# Remove plurality
normalizedEVTYPE <- gsub("RAINS\\s", "RAIN ", normalizedEVTYPE)
normalizedEVTYPE <- gsub("STORMS", "STORM", normalizedEVTYPE)
normalizedEVTYPE <- gsub("WINDS", "WIND", normalizedEVTYPE)
normalizedEVTYPE <- gsub("FLOODS", "FLOOD", normalizedEVTYPE)
# Remove adjectives
normalizedEVTYPE <- gsub("HARD |HIGH |SEVERE |HEAVY |EXCESSIVE |STRONG | INJURY", " ", normalizedEVTYPE)
# Any tornado becomes tornado
normalizedEVTYPE <- gsub("TORNADOES|TORNDAO", "TORNADO", normalizedEVTYPE)
normalizedEVTYPE <- gsub(".*TORNADO.*", "TORNADO", normalizedEVTYPE)
# Any hurricane becomes hurricane
normalizedEVTYPE <- gsub(".*HURRICANE.*", "HURRICANE", normalizedEVTYPE)
# Any thunderstorm becomes thunderstorm
normalizedEVTYPE <- gsub("TSTM|THUNERSTORM|TUNDERSTORM|THUDERSTORM|THUNDERTORM|THUNDEERSTORM", "THUNDERSTORM", normalizedEVTYPE)
normalizedEVTYPE <- gsub(".*THUNDERSTORM.*", "THUNDERSTORM", normalizedEVTYPE)
# Snow
normalizedEVTYPE <- gsub("SNOWFALL", "SNOW", normalizedEVTYPE)
# Trim adjacent whitespace
normalizedEVTYPE <- gsub("\\s+", " ", normalizedEVTYPE)
# Trim leading and trailing blanks
normalizedEVTYPE <- str_trim(normalizedEVTYPE)
storms.df$normalizedEVTYPE <- normalizedEVTYPE
unique(normalizedEVTYPE)
human.df <- storms.df[storms.df$FATALITIES>0 | storms.df$INJURIES>0, ]
human.summary <- human.df %>% group_by(normalizedEVTYPE) %>%
summarise(souls=sum(INJURIES, FATALITIES))
dim(human.summary)
human.top_summary <- top_n(human.summary, top_n, souls)
arrange(human.top_summary, desc(souls))
# Find event with worst impact
index <- which.max(human.top_summary$souls)
evtype <- human.top_summary$normalizedEVTYPE[index]
cnt <- human.top_summary$souls[index]
# Plot
ggplot(human.top_summary, aes(x=normalizedEVTYPE, y=souls)) +
ggtitle(paste("Top", top_n, "Injuries and Fatalities per Event Type\n",
min_year, " - ", max_year)) +
xlab("Event Type\nfigure 2.") + ylab("Count") +
theme(axis.text.x=element_text(angle=45, vjust=1, hjust=1)) +
geom_point() +
geom_text(hjust=0, yjust=0, size=4, color="red",
aes(label=paste(evtype, cnt),
x=human.top_summary$normalizedEVTYPE[index], y=cnt))
damage.df <- storms.df[storms.df$PROPDMG>0 | storms.df$CROPDMG>0, ]
dim(damage.df)
head(damage.df)
damage.df$PROPDMGEXP <- toupper(damage.df$PROPDMGEXP)
damage.df$CROPDMGEXP <- toupper(damage.df$CROPDMGEXP)
unique(damage.df$PROPDMGEXP)
unique(damage.df$CROPDMGEXP)
damage.df <- mutate(damage.df, kcost=0)
for (i in 1:nrow(damage.df)) {
row <- damage.df[i,]
kcost <- 0
# Include property damage in kcost
kdmg <- row["PROPDMG"]
if (kdmg > 0) {
exp <- row["PROPDMGEXP"]
if (!is.na(exp)) {
if        (exp=="3"|exp=="K") { k <- kdmg
} else if (exp=="4")          { k <- kdmg * 10
} else if (exp=="5")          { k <- kdmg * 100
} else if (exp=="6"|exp=="M") { k <- kdmg * 1000
} else if (exp=="7")          { k <- kdmg * 10000
} else if (exp=="B")          { k <- kdmg * 1000000
} else                        { k <- kdmg # Assume thousands
print(row)
}
}
}
kdmg <- row["CROPDMG"]
if (kdmg > 0) {
exp <- row["CROPDMGEXP"]
if (!is.na(exp)) {
if        (exp=="3"|exp=="K") { k <- kdmg
} else if (exp=="4")          { k <- kdmg * 10
} else if (exp=="5")          { k <- kdmg * 100
} else if (exp=="6"|exp=="M") { k <- kdmg * 1000
} else if (exp=="7")          { k <- kdmg * 10000
} else if (exp=="B")          { k <- kdmg * 1000000
} else                        { k <- kdmg # Assume thousands
print(row)
}
kcost <- kcost + k
}
}
damage.df[i, "kcost"] <- kcost
}
ggplot(storms.df, aes(x=bgn_year, fill=bgn_year >= min_year)) +
ggtitle(paste("Number of Weather Event Observations per Year")) +
xlab("Year\nfigure 1.") + ylab("Number Events") +
theme(axis.text.x=element_text(angle=45, vjust=1, hjust=1)) +
scale_fill_manual("Included", values=c("white", "red")) +
geom_histogram(binwidth=1, color="black")
storms.df <- select(storms.orig,
EVTYPE, BGN_DATE, FATALITIES, INJURIES,
PROPDMG, PROPDMGEXP, CROPDMG, CROPDMGEXP)
dim(storms.df)
storms.df <- mutate(storms.df, bgn_year=as.integer(format(strptime(storms.df$BGN_DATE, "%m/%d/%Y"), "%Y")))
max_year <- max(storms.df$bgn_year)
min_year <- max(min(storms.df$bgn_year), max_year - 10)
unique(storms.df$bgn_year)
ggplot(storms.df, aes(x=bgn_year, fill=bgn_year >= min_year)) +
ggtitle(paste("Number of Weather Event Observations per Year")) +
xlab("Year\nfigure 1.") + ylab("Number Events") +
theme(axis.text.x=element_text(angle=45, vjust=1, hjust=1)) +
scale_fill_manual("Included", values=c("white", "red")) +
geom_histogram(binwidth=1, color="black")
ggplot(storms.df, aes(x=bgn_year, fill=bgn_year >= min_year)) +
ggtitle(paste("Number of Weather Event Observations per Year")) +
xlab("Year\nfigure 1.") + ylab("Number Events") +
theme(axis.text.x=element_text(angle=45, vjust=1, hjust=1)) +
scale_fill_manual("Used in\nreport", values=c("white", "red")) +
geom_histogram(binwidth=1, color="black")
ggplot(storms.df, aes(x=bgn_year, fill=bgn_year >= min_year)) +
ggtitle(paste("Number of Weather Event Observations per Year")) +
xlab("Year\nfigure 1.") + ylab("Number Events") +
theme(axis.text.x=element_text(angle=45, vjust=1, hjust=1)) +
scale_fill_manual("Used in\nthis report", values=c("white", "red")) +
geom_histogram(binwidth=1, color="black")
tbl_df(storms.orig)
storms.df <- select(storms.orig,
EVTYPE, BGN_DATE, FATALITIES, INJURIES,
PROPDMG, PROPDMGEXP, CROPDMG, CROPDMGEXP)
dim(storms.df)
storms.df <- mutate(storms.df, bgn_year=as.integer(format(strptime(storms.df$BGN_DATE, "%m/%d/%Y"), "%Y")))
max_year <- max(storms.df$bgn_year)
min_year <- max(min(storms.df$bgn_year), max_year - 10)
unique(storms.df$bgn_year)
ggplot(storms.df, aes(x=bgn_year, fill=bgn_year >= min_year)) +
ggtitle(paste("Number Weather Event Observations by Year")) +
xlab("Year\nfigure 1.") + ylab("Number of Weather Events") +
theme(axis.text.x=element_text(angle=45, vjust=1, hjust=1)) +
scale_fill_manual("Used in\nthis report", values=c("white", "red")) +
geom_histogram(binwidth=1, color="black")
storms.df <- filter(storms.df, bgn_year >= min_year)
dim(storms.df)
storms.df <- filter(storms.df, FATALITIES>0 | INJURIES>0 | PROPDMG>0 | CROPDMG>0)
dim(storms.df)
unique(storms.df$EVTYPE)
normEVTYPE <- storms.df$EVTYPE
# Upper case all
normEVTYPE <- toupper(normEVTYPE)
# Replace special characters /, (, ), ., \, &, - with space
normEVTYPE <- gsub("/|\\(|\\)|\\.|\\\\|\\&|\\-", " ", normEVTYPE)
# Remove numeric F, G, or numeric magnitudes
normEVTYPE <- gsub("[F|G]\\d+", " ", normEVTYPE)
normEVTYPE <- gsub("\\d+", " ", normEVTYPE)
# Remove plurality
normEVTYPE <- gsub("RAINS\\s", "RAIN ", normEVTYPE)
normEVTYPE <- gsub("STORMS", "STORM", normEVTYPE)
normEVTYPE <- gsub("WINDS", "WIND", normEVTYPE)
normEVTYPE <- gsub("FLOODS", "FLOOD", normEVTYPE)
# Remove adjectives
normEVTYPE <- gsub("HARD |HIGH |SEVERE |HEAVY |EXCESSIVE |STRONG | INJURY", " ", normEVTYPE)
# Any tornado becomes tornado
normEVTYPE <- gsub("TORNADOES|TORNDAO", "TORNADO", normEVTYPE)
normEVTYPE <- gsub(".*TORNADO.*", "TORNADO", normEVTYPE)
# Any hurricane becomes hurricane
normEVTYPE <- gsub(".*HURRICANE.*", "HURRICANE", normEVTYPE)
# Any thunderstorm becomes thunderstorm
normEVTYPE <- gsub("TSTM|THUNERSTORM|TUNDERSTORM|THUDERSTORM|THUNDERTORM|THUNDEERSTORM", "THUNDERSTORM", normEVTYPE)
normEVTYPE <- gsub(".*THUNDERSTORM.*", "THUNDERSTORM", normEVTYPE)
# Snow
normEVTYPE <- gsub("SNOWFALL", "SNOW", normEVTYPE)
# Trim adjacent whitespace
normEVTYPE <- gsub("\\s+", " ", normEVTYPE)
# Trim leading and trailing blanks
normEVTYPE <- str_trim(normEVTYPE)
storms.df$normEVTYPE <- normEVTYPE
human.df <- storms.df[storms.df$FATALITIES>0 | storms.df$INJURIES>0, ]
top_n <- 20
human.top_summary <- top_n(human.summary, top_n, souls)
arrange(human.top_summary, desc(souls))
damage.df <- storms.df[storms.df$PROPDMG>0 | storms.df$CROPDMG>0, ]
dim(damage.df)
head(damage.df)
damage.df <- mutate(damage.df, kcost=0)
for (i in 1:nrow(damage.df)) {
row <- damage.df[i,]
k1 <- 0   # row's property damage
kdmg <- row["PROPDMG"]
if (kdmg > 0) {
exp <- row["PROPDMGEXP"]
if (!is.na(exp)) {
if        (exp=="3"|exp=="K") { k1 <- kdmg
} else if (exp=="4")          { k1 <- kdmg * 10
} else if (exp=="5")          { k1 <- kdmg * 100
} else if (exp=="6"|exp=="M") { k1 <- kdmg * 1000
} else if (exp=="7")          { k1 <- kdmg * 10000
} else if (exp=="B")          { k1 <- kdmg * 1000000
} else                        { k1 <- kdmg # Assume thousands
print(row)
}
}
}
k2 <- 0   # row's crop damage
kdmg <- row["CROPDMG"]
if (kdmg > 0) {
exp <- row["CROPDMGEXP"]
if (!is.na(exp)) {
if        (exp=="3"|exp=="K") { k2 <- kdmg
} else if (exp=="4")          { k2 <- kdmg * 10
} else if (exp=="5")          { k2 <- kdmg * 100
} else if (exp=="6"|exp=="M") { k2 <- kdmg * 1000
} else if (exp=="7")          { k2 <- kdmg * 10000
} else if (exp=="B")          { k2 <- kdmg * 1000000
} else                        { k2 <- kdmg # Assume thousands
print(row)
}
}
}
damage.df[i, "kcost"] <- k1 + k2
}
damage.top_summary <- top_n(damage.summary, top_n, kcost)
arrange(damage.top_summary, desc(kcost))
unique(normEVTYPE)
human.summary <- human.df %>%
group_by(normEVTYPE) %>%
summarise(souls=sum(INJURIES, FATALITIES))
dim(human.summary)
damage.df$PROPDMGEXP <- toupper(damage.df$PROPDMGEXP)
damage.df$CROPDMGEXP <- toupper(damage.df$CROPDMGEXP)
unique(damage.df$PROPDMGEXP)
unique(damage.df$CROPDMGEXP)
# Find event with worst impact
index <- which.max(damage.top_summary$kcost)
evtype <- damage.top_summary$normEVTYPE[index]
cnt <- damage.top_summary$kcost[index]
# Plot
ggplot(damage.top_summary, aes(x=normEVTYPE, y=kcost)) +
ggtitle(paste("Total Property and Crop Damage by Event Type\n",
min_year, " - ", max_year)) +
xlab("Event Type\nfigure 3.") + ylab("Cost (Thousand $)") +
theme(axis.text.x=element_text(angle=45, vjust=1, hjust=1)) +
geom_point() +
geom_text(hjust=0, yjust=0, size=4, color="red",
aes(label=paste(evtype, cnt),
x=damage.top_summary$normEVTYPE[index], y=cnt))
# Find event with worst impact
index <- which.max(human.top_summary$souls)
evtype <- human.top_summary$normEVTYPE[index]
cnt <- human.top_summary$souls[index]
# Plot
ggplot(human.top_summary, aes(x=normEVTYPE, y=souls)) +
ggtitle(paste("Total Injuries and Fatalities by Event Type\n",
min_year, " - ", max_year)) +
xlab("Event Type\nfigure 2.") + ylab("Count") +
theme(axis.text.x=element_text(angle=45, vjust=1, hjust=1)) +
geom_point() +
geom_text(hjust=0, yjust=0, size=4, color="red",
aes(label=paste(evtype, cnt),
x=human.top_summary$normEVTYPE[index], y=cnt))
damage.summary <- damage.df %>%
group_by(normEVTYPE) %>%
summarise(kcost=sum(kcost))
ggplot(human.top_summary, aes(x=normEVTYPE, y=souls)) +
ggtitle(paste("Total Injuries and Fatalities by Event Type\n",
min_year, " - ", max_year)) +
xlab("Event Type\nfigure 2.") + ylab("Count") +
theme(axis.text.x=element_text(angle=45, vjust=1, hjust=1)) +
geom_point() +
geom_text(hjust=0, yjust=0, size=4, color="red",
aes(label=paste(evtype, cnt),
x=human.top_summary$normEVTYPE[index], y=cnt))
rm(normalizedEVTYPE)
rm(storms.df)
?aggregate
print(num_years <- 10)
rm(human.summary50)
rm(k)
rm(k1)
rm(k2)
rm(kdmg)
select(storms.orig, EVTYPE=="DROWNING")
filter(storms.orig, EVTYPE=="DROWNING")
filter(storms.orig, EVTYPE=="INJURY")
filter(storms.orig, EVTYPE %in% "INJURY")
select(storms.orig, EVTYPE %contains% "INJURY")
select(storms.orig, contains("INJURY")
)
shiny::runApp('~/Documents/coursera/devdataprod-014/mtcars-performance/code')
shiny::runApp('~/Documents/coursera/devdataprod-014/mtcars-performance/code')
shiny::runApp('~/Documents/coursera/devdataprod-014/mtcars-performance/code')
?mutiply
multiply
?multiply
shiny::runApp('~/Documents/coursera/devdataprod-014/mtcars-performance/code')
shiny::runApp('~/Documents/coursera/devdataprod-014/mtcars-performance/code')
shiny::runApp('~/Documents/coursera/devdataprod-014/mtcars-performance/code')
?reformulate
shiny::runApp('~/Documents/coursera/devdataprod-014/mtcars-performance/code')
?aes_string
?reformulate
shiny::runApp('~/Documents/coursera/devdataprod-014/mtcars-performance/code')
shiny::runApp('~/Documents/coursera/devdataprod-014/mtcars-performance/code')
?facet_grid
shiny::runApp('~/Documents/coursera/devdataprod-014/mtcars-performance/code')
shiny::runApp('~/Documents/coursera/devdataprod-014/mtcars-performance/code')
geom_text
?geom_text
shiny::runApp('~/Documents/coursera/devdataprod-014/mtcars-performance/code')
shiny::runApp('~/Documents/coursera/devdataprod-014/mtcars-performance/code')
shiny::runApp('~/Documents/coursera/devdataprod-014/mtcars-performance/code')
shiny::runApp('~/Documents/coursera/devdataprod-014/mtcars-performance/code')
shiny::runApp('~/Documents/coursera/devdataprod-014/mtcars-performance/code')
shiny::runApp('~/Documents/coursera/devdataprod-014/mtcars-performance/code')
shiny::runApp('~/Documents/coursera/devdataprod-014/mtcars-performance/code')
p <- ggplot(mtcars, aes(x=wt, y=mpg, label=rownames(mtcars)))
p <- p + geom_text(hjust=0,
angle=-30,
aes(size=4))
p
shiny::runApp('~/Documents/coursera/devdataprod-014/mtcars-performance/code')
shiny::runApp('~/Documents/coursera/devdataprod-014/mtcars-performance/code')
?colnames
shiny::runApp('~/Documents/coursera/devdataprod-014/mtcars-performance/code')
shiny::runApp('~/Documents/coursera/devdataprod-014/mtcars-performance/code')
shiny::runApp('~/Documents/coursera/devdataprod-014/mtcars-performance/code')
shiny::runApp('~/Documents/coursera/devdataprod-014/mtcars-performance/code')
?as.facet
?as.factor
shiny::runApp('~/Documents/coursera/devdataprod-014/mtcars-performance/code')
str(mtcars)
shiny::runApp('~/Documents/coursera/devdataprod-014/mtcars-performance/code')
shiny::runApp('~/Documents/coursera/devdataprod-014/mtcars-fun-factor/code')
